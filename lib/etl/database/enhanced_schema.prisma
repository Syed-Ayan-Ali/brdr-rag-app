generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enhanced document table with BRDR-specific fields
model brdr_documents {
  id                  String                 @id(map: "documents_pkey") @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  doc_id              String?                @unique
  content             String
  source              String
  embedding           Unsupported("vector")?
  metadata            Json?
  created_at          DateTime?              @default(now()) @db.Timestamptz(6)
  
  // BRDR-specific fields
  doc_uuid            String?                // BRDR UUID
  doc_type_code       String?                // CIR, GL, etc.
  doc_type_desc       String?                // "CIR - Circular"
  version_code        String?                // Current, Historical
  doc_long_title      String?                // Full document title
  doc_desc            String?                // Document description
  issue_date          DateTime?              @db.Timestamptz(6)
  guideline_no        String?                // Guideline number
  supersession_date   DateTime?              @db.Timestamptz(6)
  
  // Enhanced fields for knowledge graph
  keywords            String[]               @default([]) // Extracted keywords
  topics              String[]               @default([]) // Document topics
  concepts            String[]               @default([]) // Higher-level concepts
  summary             String?                // Document summary
  document_type       String?                // Type of document
  language            String?                @default("en")
  
  // BRDR-specific arrays
  doc_topic_subtopic_list Json?             // Full topic/subtopic list from BRDR
  doc_keyword_list     Json?                // BRDR keyword list
  doc_ai_type_list     Json?                // AI type list
  doc_view_list        Json?                // View list
  directly_related_doc_list Json?           // Related documents
  version_history_doc_list Json?            // Version history
  reference_doc_list   Json?                // Reference documents
  superseded_doc_list  Json?                // Superseded documents
  
  // Relationships
  brdr_documents_data brdr_documents_data[]
  document_keywords   document_keywords[]
  document_metadata   document_metadata[]
  document_topics     document_topics[]
  document_concepts   document_concepts[]
  
  @@index([doc_id])
  @@index([document_type])
  @@index([language])
  @@index([doc_type_code])
  @@index([issue_date])
  @@index([version_code])
}

// Enhanced chunk table with relationship support
model brdr_documents_data {
  id             String                 @id(map: "document_data_pkey") @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  doc_id         String
  document_id    String                 @db.Uuid
  chunk_id       Int
  content        String
  embedding      Unsupported("vector")?
  metadata       Json?
  created_at     DateTime?              @default(now()) @db.Timestamptz(6)
  
  // Enhanced fields for smart chunking
  chunk_type     String?                // Type of chunk (question, answer, paragraph, etc.)
  keywords       String[]               @default([]) // Keywords in this chunk
  related_chunks String[]               @default([]) // IDs of related chunks
  context_extension String?             // Extended context (before/after)
  relationship_weights Json?             // Weights for relationships with other chunks
  semantic_score Float?                 // Semantic relevance score
  
  // Relationships
  brdr_documents brdr_documents         @relation(fields: [document_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "document_data_document_id_fkey")
  chunk_relationships chunk_relationships[] @relation("source_chunk")
  chunk_relationships chunk_relationships[] @relation("target_chunk")
  chunk_keywords chunk_keywords[]

  @@unique([doc_id, chunk_id], map: "document_data_doc_id_chunk_id_key")
  @@index([embedding], map: "document_data_embedding_idx")
  @@index([chunk_type])
  @@index([semantic_score])
}

// Keywords table for knowledge graph
model keywords {
  id              String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  keyword         String    @unique
  concept         String?   // Higher-level concept
  weight          Float     @default(1.0)
  frequency       Int       @default(0)
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  
  // Relationships
  document_keywords document_keywords[]
  chunk_keywords   chunk_keywords[]
  keyword_relationships keyword_relationships[] @relation("source_keyword")
  keyword_relationships keyword_relationships[] @relation("target_keyword")

  @@index([keyword])
  @@index([concept])
  @@index([weight])
}

// Topics table for BRDR topics
model topics {
  id              String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  topic_code      String    @unique
  topic_desc      String
  subtopic_code   String?
  subtopic_desc   String?
  topic_subtopic_code String? // Combined code
  topic_subtopic_desc String? // Combined description
  display_sequence Int?
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  
  // Relationships
  document_topics document_topics[]

  @@index([topic_code])
  @@index([subtopic_code])
  @@index([topic_subtopic_code])
}

// Concepts table for higher-level concepts
model concepts {
  id              String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  concept_name    String    @unique
  concept_type    String?   // regulatory, financial, technical, etc.
  description     String?
  weight          Float     @default(1.0)
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  
  // Relationships
  document_concepts document_concepts[]
  concept_keywords concept_keywords[]

  @@index([concept_name])
  @@index([concept_type])
  @@index([weight])
}

// Chunk relationships table
model chunk_relationships {
  id              String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  source_chunk_id String    @db.Uuid
  target_chunk_id String    @db.Uuid
  relationship_type String  // Type of relationship (adjacent, semantic, qa_pair, etc.)
  weight          Float     @default(1.0)
  metadata        Json?
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  
  // Relationships
  source_chunk    brdr_documents_data @relation("source_chunk", fields: [source_chunk_id], references: [id], onDelete: Cascade)
  target_chunk    brdr_documents_data @relation("target_chunk", fields: [target_chunk_id], references: [id], onDelete: Cascade)

  @@unique([source_chunk_id, target_chunk_id, relationship_type])
  @@index([relationship_type])
  @@index([weight])
}

// Keyword relationships table
model keyword_relationships {
  id              String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  source_keyword_id String  @db.Uuid
  target_keyword_id String  @db.Uuid
  relationship_type String  // Type of relationship (synonym, antonym, related, etc.)
  weight          Float     @default(1.0)
  co_occurrence   Int       @default(0)
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  
  // Relationships
  source_keyword  keywords @relation("source_keyword", fields: [source_keyword_id], references: [id], onDelete: Cascade)
  target_keyword  keywords @relation("target_keyword", fields: [target_keyword_id], references: [id], onDelete: Cascade)

  @@unique([source_keyword_id, target_keyword_id, relationship_type])
  @@index([relationship_type])
  @@index([weight])
}

// Document-keyword mappings
model document_keywords {
  id              String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  document_id     String    @db.Uuid
  keyword_id      String    @db.Uuid
  frequency       Int       @default(1)
  weight          Float     @default(1.0)
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  
  // Relationships
  document        brdr_documents @relation(fields: [document_id], references: [id], onDelete: Cascade)
  keyword         keywords @relation(fields: [keyword_id], references: [id], onDelete: Cascade)

  @@unique([document_id, keyword_id])
  @@index([frequency])
  @@index([weight])
}

// Document-topic mappings
model document_topics {
  id              String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  document_id     String    @db.Uuid
  topic_id        String    @db.Uuid
  weight          Float     @default(1.0)
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  
  // Relationships
  document        brdr_documents @relation(fields: [document_id], references: [id], onDelete: Cascade)
  topic           topics @relation(fields: [topic_id], references: [id], onDelete: Cascade)

  @@unique([document_id, topic_id])
  @@index([weight])
}

// Document-concept mappings
model document_concepts {
  id              String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  document_id     String    @db.Uuid
  concept_id      String    @db.Uuid
  weight          Float     @default(1.0)
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  
  // Relationships
  document        brdr_documents @relation(fields: [document_id], references: [id], onDelete: Cascade)
  concept         concepts @relation(fields: [concept_id], references: [id], onDelete: Cascade)

  @@unique([document_id, concept_id])
  @@index([weight])
}

// Concept-keyword mappings
model concept_keywords {
  id              String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  concept_id      String    @db.Uuid
  keyword_id      String    @db.Uuid
  weight          Float     @default(1.0)
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  
  // Relationships
  concept         concepts @relation(fields: [concept_id], references: [id], onDelete: Cascade)
  keyword         keywords @relation(fields: [keyword_id], references: [id], onDelete: Cascade)

  @@unique([concept_id, keyword_id])
  @@index([weight])
}

// Chunk-keyword mappings
model chunk_keywords {
  id              String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  chunk_id        String    @db.Uuid
  keyword_id      String    @db.Uuid
  frequency       Int       @default(1)
  weight          Float     @default(1.0)
  position        Int?      // Position in chunk
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  
  // Relationships
  chunk           brdr_documents_data @relation(fields: [chunk_id], references: [id], onDelete: Cascade)
  keyword         keywords @relation(fields: [keyword_id], references: [id], onDelete: Cascade)

  @@unique([chunk_id, keyword_id])
  @@index([frequency])
  @@index([weight])
  @@index([position])
}

// Enhanced document metadata
model document_metadata {
  id              String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  document_id     String    @db.Uuid
  metadata_type   String    // Type of metadata (summary, topics, entities, etc.)
  metadata_key    String
  metadata_value  Json
  confidence      Float     @default(1.0)
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  
  // Relationships
  document        brdr_documents @relation(fields: [document_id], references: [id], onDelete: Cascade)

  @@unique([document_id, metadata_type, metadata_key])
  @@index([metadata_type])
  @@index([confidence])
}

// Image content table for OCR and visual content
model image_content {
  id              String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  document_id     String    @db.Uuid
  chunk_id        String?   @db.Uuid
  image_url       String?
  image_data      String?   // Base64 encoded image data
  ocr_text        String?
  image_type      String?   // chart, table, diagram, etc.
  position        Json?     // Position in document
  related_text    String?   // Related text content
  embedding       Unsupported("vector")?
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  
  // Relationships
  document        brdr_documents @relation(fields: [document_id], references: [id], onDelete: Cascade)
  chunk           brdr_documents_data? @relation(fields: [chunk_id], references: [id], onDelete: SetNull)

  @@index([image_type])
  @@index([embedding])
}

// Existing tables (unchanged)
model chats {
  chat_id           String     @id @db.Uuid
  start_time        DateTime   @db.Timestamptz(6)
  last_message_time DateTime   @db.Timestamptz(6)
  search_count      Int
  title             String
  created_at        DateTime?  @default(now()) @db.Timestamptz(6)
  searches          searches[]

  @@index([chat_id], map: "idx_chats_chat_id")
}

model collections {
  id                        String                 @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  collection_table_id       String
  collection_chunk_table_id String
  embedding                 Unsupported("vector")?
  metadata                  Json?
  created_at                DateTime?              @default(now()) @db.Timestamptz(6)
  description               String?

  @@unique([collection_table_id, collection_chunk_table_id])
  @@index([embedding])
}

model searches {
  search_id     String    @id @db.Uuid
  chat_id       String?   @db.Uuid
  search_time   DateTime  @db.Timestamptz(6)
  query         String
  answer        String
  response_time Float
  token_size    Int
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  chats         chats?    @relation(fields: [chat_id], references: [chat_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([chat_id], map: "idx_searches_chat_id")
  @@index([search_time], map: "idx_searches_search_time")
} 